    // 05数组
    //   8e
    //   随机访问
随机访问是O1, 查找不是

a[i]_address = base_address + i * data_type_size

    //   插入删除
    //     优化
换拉插入
标记删除

    //   越界问题
java.lang.ArrayIndexOutOfBoundsException

    //   容器和数组
    //     容器
    //       vector
    //       ArrayList
    //     细节封装
    //     动态扩容

如果能确定 最好在创建 ArrayList 的时候事先指定数据大小

ArrayList<User> users = new ArrayList(10000);
for (int i =0; i< 10000; ++i){
    users.add(xxx);

    //     区别
}
Java ArrayList无法存储基本类型,需要 Integer,Long
大小已知,操作简单用数组

表示多维数组比较直观
  Object[][]
  ArrayList<ArrayList> array

    //   为什么从0开始
    //     下标定义是偏移  offset
a[k]_address = base_address + k * type_size
a[k]_address = base_address + (k-1) * type_size  // 假设从1开始,定位

    //   代码模块
    //     实现代码
    //   leetcode
15
169
41
    //   问题及答案
    //     实现一个支持动态扩容的数组
    //     实现一个大小固定的有序数组，支持动态增删改操作
    //     实现两个有序数组合并为一个有序数组

// 标记清除垃圾回收算法

// 二维数组内存寻址公式

二维数组内存寻址：
对于 m * n 的数组，a [ i ][ j ] (i < m,j < n)
地址为：
address = base_address + ( i * n + j) * type_size
